# -*- coding: utf-8 -*-
"""Neural_Networks_Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1am-6y29aw-YK4VdlrX3xycbA-TmvDflw
"""

# 1. Create a class Employee and then do the following
   # • Create a data member to count the number of Employees
   # • Create a constructor to initialize name, family, salary, department
   # • Create a function to average salary
   # • Create a Fulltime Employee class and it should inherit the properties of Employee class
   # • Create the instances of Fulltime Employee class and Employee class and call their member functions.

class Employee:

    Total_Employee = 0
    def __init__(self,name, family, salary, department):
        self.name = name
        self.family = family
        self.salary = salary
        self.department = department

        Employee.Total_Employee += 1

    @classmethod
    def average_salary(cls,total_salary):
        return total_salary / cls.Total_Employee


class Fulltime_Employee(Employee):
    def __init__(self,name, family, salary, department):
        self.name = name
        self.family = family
        self.salary = salary
        self.department = department
        super().__init__(name, family, salary, department)


emp_1 = Employee("Mani","Kotaprolu",10000,"IT")
emp_2 = Employee("Subbu","Upputuri",20000,"CSE")
emp_3 = Employee("Nitin","kasaraneni",30000,"ECE")

emp_4 = Fulltime_Employee("Sai","Koppineni",40000,"IT")


total_salary = emp_1.salary+emp_2.salary+emp_3.salary+emp_4.salary

avg_salary = Employee.average_salary(total_salary)

print(f"Total Employees {Employee.Total_Employee}")
print(f"Average salary {avg_salary}")

# 2. Numpy
   # Using NumPy create random vector of size 20 having only float in the range 1-20.
   # Then reshape the array to 4 by 5
   # Then replace the max in each row by 0 (axis=1)
   # (you can NOT implement it via for loop)


import numpy as np

random_vector = np.random.uniform(1,20,20)
print(random_vector)

matrix = random_vector.reshape(4,5)
print(matrix)

max_value = np.argmax(matrix, axis=1)
print(max_value)

matrix[np.arange(matrix.shape[0]),max_value] = 0
print(matrix)